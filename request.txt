"IncomingMessage {\n  _readableState: \n   ReadableState {\n     objectMode: false,\n     highWaterMark: 16384,\n     buffer: [],\n     length: 0,\n     pipes: null,\n     pipesCount: 0,\n     flowing: null,\n     ended: false,\n     endEmitted: false,\n     reading: false,\n     sync: true,\n     needReadable: false,\n     emittedReadable: false,\n     readableListening: false,\n     resumeScheduled: false,\n     defaultEncoding: 'utf8',\n     ranOut: false,\n     awaitDrain: 0,\n     readingMore: false,\n     decoder: null,\n     encoding: null },\n  readable: true,\n  domain: null,\n  _events: {},\n  _eventsCount: 0,\n  _maxListeners: undefined,\n  socket: \n   Socket {\n     _connecting: false,\n     _hadError: false,\n     _handle: \n      TCP {\n        bytesRead: 512,\n        _externalStream: {},\n        fd: 11,\n        reading: true,\n        owner: [Circular],\n        onread: [Function: onread],\n        onconnection: null,\n        writeQueueSize: 0 },\n     _parent: null,\n     _host: null,\n     _readableState: \n      ReadableState {\n        objectMode: false,\n        highWaterMark: 16384,\n        buffer: [],\n        length: 0,\n        pipes: null,\n        pipesCount: 0,\n        flowing: true,\n        ended: false,\n        endEmitted: false,\n        reading: true,\n        sync: false,\n        needReadable: true,\n        emittedReadable: false,\n        readableListening: false,\n        resumeScheduled: false,\n        defaultEncoding: 'utf8',\n        ranOut: false,\n        awaitDrain: 0,\n        readingMore: false,\n        decoder: null,\n        encoding: null },\n     readable: true,\n     domain: null,\n     _events: \n      { end: [Object],\n        finish: [Function: onSocketFinish],\n        _socketEnd: [Function: onSocketEnd],\n        drain: [Object],\n        timeout: [Function],\n        error: [Function: socketOnError],\n        close: [Object],\n        data: [Function: socketOnData],\n        resume: [Function: onSocketResume],\n        pause: [Function: onSocketPause] },\n     _eventsCount: 10,\n     _maxListeners: undefined,\n     _writableState: \n      WritableState {\n        objectMode: false,\n        highWaterMark: 16384,\n        needDrain: false,\n        ending: false,\n        ended: false,\n        finished: false,\n        decodeStrings: false,\n        defaultEncoding: 'utf8',\n        length: 0,\n        writing: false,\n        corked: 0,\n        sync: true,\n        bufferProcessing: false,\n        onwrite: [Function],\n        writecb: null,\n        writelen: 0,\n        bufferedRequest: null,\n        lastBufferedRequest: null,\n        pendingcb: 0,\n        prefinished: false,\n        errorEmitted: false,\n        bufferedRequestCount: 0,\n        corkedRequestsFree: [Object] },\n     writable: true,\n     allowHalfOpen: true,\n     destroyed: false,\n     _bytesDispatched: 0,\n     _sockname: null,\n     _pendingData: null,\n     _pendingEncoding: '',\n     server: \n      Server {\n        domain: null,\n        _events: [Object],\n        _eventsCount: 3,\n        _maxListeners: undefined,\n        _connections: 1,\n        _handle: [Object],\n        _usingSlaves: false,\n        _slaves: [],\n        _unref: false,\n        allowHalfOpen: true,\n        pauseOnConnect: false,\n        httpAllowHalfOpen: false,\n        timeout: 120000,\n        _pendingResponseData: 0,\n        _connectionKey: '6::::3434' },\n     _server: \n      Server {\n        domain: null,\n        _events: [Object],\n        _eventsCount: 3,\n        _maxListeners: undefined,\n        _connections: 1,\n        _handle: [Object],\n        _usingSlaves: false,\n        _slaves: [],\n        _unref: false,\n        allowHalfOpen: true,\n        pauseOnConnect: false,\n        httpAllowHalfOpen: false,\n        timeout: 120000,\n        _pendingResponseData: 0,\n        _connectionKey: '6::::3434' },\n     _idleTimeout: 120000,\n     _idleNext: \n      TimersList {\n        _idleNext: [Circular],\n        _idlePrev: [Circular],\n        _timer: [Object],\n        _unrefed: true,\n        msecs: 120000 },\n     _idlePrev: \n      TimersList {\n        _idleNext: [Circular],\n        _idlePrev: [Circular],\n        _timer: [Object],\n        _unrefed: true,\n        msecs: 120000 },\n     _idleStart: 37726,\n     parser: \n      HTTPParser {\n        '0': [Function: parserOnHeaders],\n        '1': [Function: parserOnHeadersComplete],\n        '2': [Function: parserOnBody],\n        '3': [Function: parserOnMessageComplete],\n        '4': [Function: onParserExecute],\n        _headers: [],\n        _url: '',\n        _consumed: true,\n        socket: [Circular],\n        incoming: [Circular],\n        outgoing: null,\n        maxHeaderPairs: 2000,\n        onIncoming: [Function: parserOnIncoming] },\n     on: [Function: socketOnWrap],\n     _paused: false,\n     read: [Function],\n     _consuming: true,\n     _httpMessage: \n      ServerResponse {\n        domain: null,\n        _events: [Object],\n        _eventsCount: 1,\n        _maxListeners: undefined,\n        output: [],\n        outputEncodings: [],\n        outputCallbacks: [],\n        outputSize: 0,\n        writable: true,\n        _last: false,\n        chunkedEncoding: false,\n        shouldKeepAlive: true,\n        useChunkedEncodingByDefault: true,\n        sendDate: true,\n        _removedHeader: {},\n        _contentLength: null,\n        _hasBody: true,\n        _trailer: '',\n        finished: false,\n        _headerSent: false,\n        socket: [Circular],\n        connection: [Circular],\n        _header: null,\n        _headers: [Object],\n        _headerNames: [Object],\n        _onPendingData: [Function: updateOutgoingData],\n        req: [Circular],\n        locals: {} } },\n  connection: \n   Socket {\n     _connecting: false,\n     _hadError: false,\n     _handle: \n      TCP {\n        bytesRead: 512,\n        _externalStream: {},\n        fd: 11,\n        reading: true,\n        owner: [Circular],\n        onread: [Function: onread],\n        onconnection: null,\n        writeQueueSize: 0 },\n     _parent: null,\n     _host: null,\n     _readableState: \n      ReadableState {\n        objectMode: false,\n        highWaterMark: 16384,\n        buffer: [],\n        length: 0,\n        pipes: null,\n        pipesCount: 0,\n        flowing: true,\n        ended: false,\n        endEmitted: false,\n        reading: true,\n        sync: false,\n        needReadable: true,\n        emittedReadable: false,\n        readableListening: false,\n        resumeScheduled: false,\n        defaultEncoding: 'utf8',\n        ranOut: false,\n        awaitDrain: 0,\n        readingMore: false,\n        decoder: null,\n        encoding: null },\n     readable: true,\n     domain: null,\n     _events: \n      { end: [Object],\n        finish: [Function: onSocketFinish],\n        _socketEnd: [Function: onSocketEnd],\n        drain: [Object],\n        timeout: [Function],\n        error: [Function: socketOnError],\n        close: [Object],\n        data: [Function: socketOnData],\n        resume: [Function: onSocketResume],\n        pause: [Function: onSocketPause] },\n     _eventsCount: 10,\n     _maxListeners: undefined,\n     _writableState: \n      WritableState {\n        objectMode: false,\n        highWaterMark: 16384,\n        needDrain: false,\n        ending: false,\n        ended: false,\n        finished: false,\n        decodeStrings: false,\n        defaultEncoding: 'utf8',\n        length: 0,\n        writing: false,\n        corked: 0,\n        sync: true,\n        bufferProcessing: false,\n        onwrite: [Function],\n        writecb: null,\n        writelen: 0,\n        bufferedRequest: null,\n        lastBufferedRequest: null,\n        pendingcb: 0,\n        prefinished: false,\n        errorEmitted: false,\n        bufferedRequestCount: 0,\n        corkedRequestsFree: [Object] },\n     writable: true,\n     allowHalfOpen: true,\n     destroyed: false,\n     _bytesDispatched: 0,\n     _sockname: null,\n     _pendingData: null,\n     _pendingEncoding: '',\n     server: \n      Server {\n        domain: null,\n        _events: [Object],\n        _eventsCount: 3,\n        _maxListeners: undefined,\n        _connections: 1,\n        _handle: [Object],\n        _usingSlaves: false,\n        _slaves: [],\n        _unref: false,\n        allowHalfOpen: true,\n        pauseOnConnect: false,\n        httpAllowHalfOpen: false,\n        timeout: 120000,\n        _pendingResponseData: 0,\n        _connectionKey: '6::::3434' },\n     _server: \n      Server {\n        domain: null,\n        _events: [Object],\n        _eventsCount: 3,\n        _maxListeners: undefined,\n        _connections: 1,\n        _handle: [Object],\n        _usingSlaves: false,\n        _slaves: [],\n        _unref: false,\n        allowHalfOpen: true,\n        pauseOnConnect: false,\n        httpAllowHalfOpen: false,\n        timeout: 120000,\n        _pendingResponseData: 0,\n        _connectionKey: '6::::3434' },\n     _idleTimeout: 120000,\n     _idleNext: \n      TimersList {\n        _idleNext: [Circular],\n        _idlePrev: [Circular],\n        _timer: [Object],\n        _unrefed: true,\n        msecs: 120000 },\n     _idlePrev: \n      TimersList {\n        _idleNext: [Circular],\n        _idlePrev: [Circular],\n        _timer: [Object],\n        _unrefed: true,\n        msecs: 120000 },\n     _idleStart: 37726,\n     parser: \n      HTTPParser {\n        '0': [Function: parserOnHeaders],\n        '1': [Function: parserOnHeadersComplete],\n        '2': [Function: parserOnBody],\n        '3': [Function: parserOnMessageComplete],\n        '4': [Function: onParserExecute],\n        _headers: [],\n        _url: '',\n        _consumed: true,\n        socket: [Circular],\n        incoming: [Circular],\n        outgoing: null,\n        maxHeaderPairs: 2000,\n        onIncoming: [Function: parserOnIncoming] },\n     on: [Function: socketOnWrap],\n     _paused: false,\n     read: [Function],\n     _consuming: true,\n     _httpMessage: \n      ServerResponse {\n        domain: null,\n        _events: [Object],\n        _eventsCount: 1,\n        _maxListeners: undefined,\n        output: [],\n        outputEncodings: [],\n        outputCallbacks: [],\n        outputSize: 0,\n        writable: true,\n        _last: false,\n        chunkedEncoding: false,\n        shouldKeepAlive: true,\n        useChunkedEncodingByDefault: true,\n        sendDate: true,\n        _removedHeader: {},\n        _contentLength: null,\n        _hasBody: true,\n        _trailer: '',\n        finished: false,\n        _headerSent: false,\n        socket: [Circular],\n        connection: [Circular],\n        _header: null,\n        _headers: [Object],\n        _headerNames: [Object],\n        _onPendingData: [Function: updateOutgoingData],\n        req: [Circular],\n        locals: {} } },\n  httpVersionMajor: 1,\n  httpVersionMinor: 1,\n  httpVersion: '1.1',\n  complete: false,\n  headers: \n   { host: 'localhost:3434',\n     'user-agent': 'Mozilla/5.0 (X11; Linux i686; rv:38.0) Gecko/20100101 Firefox/38.0 Iceweasel/38.7.1',\n     accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n     'accept-language': 'en-US,en;q=0.5',\n     'accept-encoding': 'gzip, deflate',\n     'if-modified-since': 'Sun, 29 May 2016 01:19:26 GMT',\n     'if-none-match': 'W/\"8a-154fa1821e0\"',\n     'cache-control': 'max-age=0',\n     referer: 'http://localhost:3434/?test=hi',\n     cookie: 'nicktt_currenttournament=5913pprw',\n     connection: 'keep-alive' },\n  rawHeaders: \n   [ 'Host',\n     'localhost:3434',\n     'User-Agent',\n     'Mozilla/5.0 (X11; Linux i686; rv:38.0) Gecko/20100101 Firefox/38.0 Iceweasel/38.7.1',\n     'Accept',\n     'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n     'Accept-Language',\n     'en-US,en;q=0.5',\n     'Accept-Encoding',\n     'gzip, deflate',\n     'If-Modified-Since',\n     'Sun, 29 May 2016 01:19:26 GMT',\n     'If-None-Match',\n     'W/\"8a-154fa1821e0\"',\n     'Cache-Control',\n     'max-age=0',\n     'Referer',\n     'http://localhost:3434/?test=hi',\n     'Cookie',\n     'nicktt_currenttournament=5913pprw',\n     'Connection',\n     'keep-alive' ],\n  trailers: {},\n  rawTrailers: [],\n  upgrade: false,\n  url: '/?test=hi&test2=bye',\n  method: 'GET',\n  statusCode: null,\n  statusMessage: null,\n  client: \n   Socket {\n     _connecting: false,\n     _hadError: false,\n     _handle: \n      TCP {\n        bytesRead: 512,\n        _externalStream: {},\n        fd: 11,\n        reading: true,\n        owner: [Circular],\n        onread: [Function: onread],\n        onconnection: null,\n        writeQueueSize: 0 },\n     _parent: null,\n     _host: null,\n     _readableState: \n      ReadableState {\n        objectMode: false,\n        highWaterMark: 16384,\n        buffer: [],\n        length: 0,\n        pipes: null,\n        pipesCount: 0,\n        flowing: true,\n        ended: false,\n        endEmitted: false,\n        reading: true,\n        sync: false,\n        needReadable: true,\n        emittedReadable: false,\n        readableListening: false,\n        resumeScheduled: false,\n        defaultEncoding: 'utf8',\n        ranOut: false,\n        awaitDrain: 0,\n        readingMore: false,\n        decoder: null,\n        encoding: null },\n     readable: true,\n     domain: null,\n     _events: \n      { end: [Object],\n        finish: [Function: onSocketFinish],\n        _socketEnd: [Function: onSocketEnd],\n        drain: [Object],\n        timeout: [Function],\n        error: [Function: socketOnError],\n        close: [Object],\n        data: [Function: socketOnData],\n        resume: [Function: onSocketResume],\n        pause: [Function: onSocketPause] },\n     _eventsCount: 10,\n     _maxListeners: undefined,\n     _writableState: \n      WritableState {\n        objectMode: false,\n        highWaterMark: 16384,\n        needDrain: false,\n        ending: false,\n        ended: false,\n        finished: false,\n        decodeStrings: false,\n        defaultEncoding: 'utf8',\n        length: 0,\n        writing: false,\n        corked: 0,\n        sync: true,\n        bufferProcessing: false,\n        onwrite: [Function],\n        writecb: null,\n        writelen: 0,\n        bufferedRequest: null,\n        lastBufferedRequest: null,\n        pendingcb: 0,\n        prefinished: false,\n        errorEmitted: false,\n        bufferedRequestCount: 0,\n        corkedRequestsFree: [Object] },\n     writable: true,\n     allowHalfOpen: true,\n     destroyed: false,\n     _bytesDispatched: 0,\n     _sockname: null,\n     _pendingData: null,\n     _pendingEncoding: '',\n     server: \n      Server {\n        domain: null,\n        _events: [Object],\n        _eventsCount: 3,\n        _maxListeners: undefined,\n        _connections: 1,\n        _handle: [Object],\n        _usingSlaves: false,\n        _slaves: [],\n        _unref: false,\n        allowHalfOpen: true,\n        pauseOnConnect: false,\n        httpAllowHalfOpen: false,\n        timeout: 120000,\n        _pendingResponseData: 0,\n        _connectionKey: '6::::3434' },\n     _server: \n      Server {\n        domain: null,\n        _events: [Object],\n        _eventsCount: 3,\n        _maxListeners: undefined,\n        _connections: 1,\n        _handle: [Object],\n        _usingSlaves: false,\n        _slaves: [],\n        _unref: false,\n        allowHalfOpen: true,\n        pauseOnConnect: false,\n        httpAllowHalfOpen: false,\n        timeout: 120000,\n        _pendingResponseData: 0,\n        _connectionKey: '6::::3434' },\n     _idleTimeout: 120000,\n     _idleNext: \n      TimersList {\n        _idleNext: [Circular],\n        _idlePrev: [Circular],\n        _timer: [Object],\n        _unrefed: true,\n        msecs: 120000 },\n     _idlePrev: \n      TimersList {\n        _idleNext: [Circular],\n        _idlePrev: [Circular],\n        _timer: [Object],\n        _unrefed: true,\n        msecs: 120000 },\n     _idleStart: 37726,\n     parser: \n      HTTPParser {\n        '0': [Function: parserOnHeaders],\n        '1': [Function: parserOnHeadersComplete],\n        '2': [Function: parserOnBody],\n        '3': [Function: parserOnMessageComplete],\n        '4': [Function: onParserExecute],\n        _headers: [],\n        _url: '',\n        _consumed: true,\n        socket: [Circular],\n        incoming: [Circular],\n        outgoing: null,\n        maxHeaderPairs: 2000,\n        onIncoming: [Function: parserOnIncoming] },\n     on: [Function: socketOnWrap],\n     _paused: false,\n     read: [Function],\n     _consuming: true,\n     _httpMessage: \n      ServerResponse {\n        domain: null,\n        _events: [Object],\n        _eventsCount: 1,\n        _maxListeners: undefined,\n        output: [],\n        outputEncodings: [],\n        outputCallbacks: [],\n        outputSize: 0,\n        writable: true,\n        _last: false,\n        chunkedEncoding: false,\n        shouldKeepAlive: true,\n        useChunkedEncodingByDefault: true,\n        sendDate: true,\n        _removedHeader: {},\n        _contentLength: null,\n        _hasBody: true,\n        _trailer: '',\n        finished: false,\n        _headerSent: false,\n        socket: [Circular],\n        connection: [Circular],\n        _header: null,\n        _headers: [Object],\n        _headerNames: [Object],\n        _onPendingData: [Function: updateOutgoingData],\n        req: [Circular],\n        locals: {} } },\n  _consuming: false,\n  _dumped: false,\n  next: [Function: next],\n  baseUrl: '',\n  originalUrl: '/?test=hi&test2=bye',\n  _parsedUrl: \n   Url {\n     protocol: null,\n     slashes: null,\n     auth: null,\n     host: null,\n     port: null,\n     hostname: null,\n     hash: null,\n     search: '?test=hi&test2=bye',\n     query: 'test=hi&test2=bye',\n     pathname: '/',\n     path: '/?test=hi&test2=bye',\n     href: '/?test=hi&test2=bye',\n     _raw: '/?test=hi&test2=bye' },\n  params: {},\n  query: { test: 'hi', test2: 'bye' },\n  res: \n   ServerResponse {\n     domain: null,\n     _events: { finish: [Function: resOnFinish] },\n     _eventsCount: 1,\n     _maxListeners: undefined,\n     output: [],\n     outputEncodings: [],\n     outputCallbacks: [],\n     outputSize: 0,\n     writable: true,\n     _last: false,\n     chunkedEncoding: false,\n     shouldKeepAlive: true,\n     useChunkedEncodingByDefault: true,\n     sendDate: true,\n     _removedHeader: {},\n     _contentLength: null,\n     _hasBody: true,\n     _trailer: '',\n     finished: false,\n     _headerSent: false,\n     socket: \n      Socket {\n        _connecting: false,\n        _hadError: false,\n        _handle: [Object],\n        _parent: null,\n        _host: null,\n        _readableState: [Object],\n        readable: true,\n        domain: null,\n        _events: [Object],\n        _eventsCount: 10,\n        _maxListeners: undefined,\n        _writableState: [Object],\n        writable: true,\n        allowHalfOpen: true,\n        destroyed: false,\n        _bytesDispatched: 0,\n        _sockname: null,\n        _pendingData: null,\n        _pendingEncoding: '',\n        server: [Object],\n        _server: [Object],\n        _idleTimeout: 120000,\n        _idleNext: [Object],\n        _idlePrev: [Object],\n        _idleStart: 37726,\n        parser: [Object],\n        on: [Function: socketOnWrap],\n        _paused: false,\n        read: [Function],\n        _consuming: true,\n        _httpMessage: [Circular] },\n     connection: \n      Socket {\n        _connecting: false,\n        _hadError: false,\n        _handle: [Object],\n        _parent: null,\n        _host: null,\n        _readableState: [Object],\n        readable: true,\n        domain: null,\n        _events: [Object],\n        _eventsCount: 10,\n        _maxListeners: undefined,\n        _writableState: [Object],\n        writable: true,\n        allowHalfOpen: true,\n        destroyed: false,\n        _bytesDispatched: 0,\n        _sockname: null,\n        _pendingData: null,\n        _pendingEncoding: '',\n        server: [Object],\n        _server: [Object],\n        _idleTimeout: 120000,\n        _idleNext: [Object],\n        _idlePrev: [Object],\n        _idleStart: 37726,\n        parser: [Object],\n        on: [Function: socketOnWrap],\n        _paused: false,\n        read: [Function],\n        _consuming: true,\n        _httpMessage: [Circular] },\n     _header: null,\n     _headers: { 'x-powered-by': 'Express' },\n     _headerNames: { 'x-powered-by': 'X-Powered-By' },\n     _onPendingData: [Function: updateOutgoingData],\n     req: [Circular],\n     locals: {} },\n  route: Route { path: '/', stack: [ [Object] ], methods: { get: true } } }"